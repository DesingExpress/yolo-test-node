{"ast":null,"code":"var _jsxFileName = \"/Users/kim-euntae/Documents/Dev/yolov8-nxv/src/nodes/+app.js\";\nimport { Pure } from \"@design-express/fabrica\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport \"@tensorflow/tfjs-backend-webgl\";\nimport ContentsBox from \"../components/ContentsBox\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const YOLOv8NXV = /*#__PURE__*/(() => {\n  class YOLOv8NXV extends Pure {\n    //your node constructor class\n    constructor() {\n      super();\n      this.addInput(\"Get Image\", \"\");\n      this.addOutput(\"Results\", \"jsx\");\n      this.widget = this.addWidget(\"button\", \"Execute\", null, () => {\n        this.onExecute();\n      });\n    }\n\n    //function to call when the node is executed\n    async onExecute() {\n      tf.ready().then(async () => {\n        const yolov8 = await tf.loadGraphModel(`${window.location.href}/yolov8n-nxv/model.json`, {\n          onProgress: fractions => {\n            // setLoading({ loading: true, progress: fractions }); // set loading fractions\n          }\n        }); // load model\n\n        // warming up model\n        const dummyInput = tf.ones(yolov8.inputs[0].shape);\n        const warmupResults = yolov8.execute(dummyInput);\n\n        // setLoading({ loading: false, progress: 1 });\n        // setModel({\n        //   net: yolov8,\n        //   inputShape: yolov8.inputs[0].shape,\n        // }); // set model & input shape\n\n        tf.dispose([warmupResults, dummyInput]); // cleanup memory\n      });\n\n      this.setOutputData(1, /*#__PURE__*/_jsxDEV(ContentsBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 27\n      }, this));\n    }\n    onAction(action, param) {\n      if (action === \"play\") this.triggerSlot(1, param);\n    }\n  }\n  //name to show on the canvas\n  YOLOv8NXV.path = \"YOLOv8\";\n  YOLOv8NXV.title = \"YOLOv8 NXV\";\n  YOLOv8NXV.description = \"Object Detection using YOLOv8 and Tensorflow.js\";\n  return YOLOv8NXV;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}